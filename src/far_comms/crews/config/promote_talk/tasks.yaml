# All tasks follow style_shared.md, style_li.md, and style_x.md requirements
# QA Orchestrator manages conditional execution of preprocessing tasks

research_resources_task:
  description: >
    Research and find actual URLs for the {speaker}'s PRIMARY resources - the main work they are presenting.
    This is for social media sharing (1 tweet), so focus on 1-4 most important resources only.
    
    <SLIDES>
    {slides_content}
    </SLIDES>

    SMART PRIORITY ORDER (should never fail):
    
    1. QR CODES/URLs FIRST if slides available:
       - If slides content is blank/empty: skip to step 2
       - Look for any URLs/links in the slides content above
       - If URLs found: these are the speaker's intended resources, verify and use them, STOP HERE
       - If no URLs found in slides: proceed to step 2
    
    2. TITLE + SPEAKER SEARCH (most reliable):
       - Query: "{talk_title} {speaker} paper" or "{speaker} {affiliation} {talk_title}"
       - This usually finds the main paper being presented
       - ONLY include if speaker is confirmed author/co-author
       - If 1+ quality speaker-authored resource found: STOP HERE
    
    3. SOCIAL MEDIA SEARCH (posts by speaker or co-authors about their work):
       - Single query: "{talk_title}" (site:x.com OR site:linkedin.com OR site:bsky.app)
       - Look for posts/threads by speaker OR co-authors about this work
       - ONLY include if: speaker is confirmed author AND post is by one of the authors
       - If 1+ quality social media resource found: STOP HERE
    
    4. SLIDES-INFORMED SEARCH (if slides available):
       - If slides content is blank/empty: STOP HERE 
       - Extract key terms/concepts from slides content above
       - Search with speaker name + key terms from slides
       - If 1+ good resource found: STOP HERE
       - If still nothing found: return blank/empty result
    
    EFFICIENCY RULES:
    - MAX 5 searches total 
    - Stop immediately when at least 1 quality resource found  
    - QR codes/URLs from slides HIGHEST priority (speaker's intended resources)
    - Title+Speaker search most reliable fallback
    - Academic conference publications > arxiv papers > speaker's social media posts > project websites > GitHub repos
    - OK to return empty if no speaker-authored resources found - quality over quantity
    - Better empty than generic resources that aren't directly related to the talk
    
    CRITICAL VALIDATION RULES:
    - MANDATORY: Speaker "{speaker}" MUST be listed as author/co-author on ALL papers
    - MANDATORY: Verify URLs actually work before including them
    - MANDATORY: If you cannot confirm speaker authorship, DO NOT include the resource
    - Do NOT include resources just because they match the topic - they must be speaker's work
    
    STRICT EXCLUSIONS:
    - Do NOT include general speaker homepages or CV
    - Do NOT include organization websites  
    - Do NOT include cited papers by other authors
    - Do NOT include comprehensive reference lists
    
  expected_output: >
    Simple format for Coda Resources column:
    "[Paper Title] - https://arxiv.org/abs/123"
    
    Maximum 1-4 lines. Focus on main academic/research resources only.
    Skip GitHub unless no papers or project websites found.
  agent: resource_researcher_agent

analyze_transcript_task:
  description: >
    Analyze the transcript to extract the {speaker}'s ({affiliation}) key ideas and points using their actual words and phrases.
    This analysis will be the foundation for downstream summarization and social media content generation.
    
    <TRANSCRIPT>
    {transcript_content}
    </TRANSCRIPT>
    
    <SLIDES>
    {slides_content}
    </SLIDES>
    
    CRITICAL: Use the speaker's exact words, phrases, and terminology wherever possible.
    
    Your analysis should:
    - Extract the speaker's main thesis using their own language
    - Capture key points in the speaker's voice and phrasing
    - Preserve the speaker's organizational structure and flow
    - Extract specific numbers, technical terms, and metrics exactly as stated
    - Find the most quotable/impactful statements in the speaker's words
    - Highlight surprising or counterintuitive claims using their exact phrasing
    - Capture any explicit CTAs, resource mentions, or directives from speaker
    - Extract summary/takeaway slides verbatim (perfect for social media)
    - Identify most tweetable content and social media ready quotes
    - Maintain technical accuracy while preserving authentic voice
    
  expected_output: >
    # {speaker} - {talk_title}
    
    ## Core Thesis
    [Main argument using speaker's exact words - 1-2 sentences from transcript]
    
    ## Key Points
    - [Key point 1 using speaker's phrases and terminology]
    - [Key point 2 using speaker's phrases and terminology]  
    - [Key point 3 using speaker's phrases and terminology]
    
    ## Technical Details
    [Specific numbers, methods, metrics exactly as speaker stated them]
    
    ## Notable Quotes
    > "[Most impactful quote from speaker]"
    > "[Surprising or counterintuitive claim in speaker's words]"
    > "[Technical insight worth preserving]"
    
    ## Speaker's Call-to-Action
    [Any explicit CTAs, resource mentions, or directives from speaker - use exact words]
    
    ## Social Media Ready Content
    [Most tweetable quotes, key takeaways, summary statements in speaker's voice]
    
    ## Talk Structure
    [Brief description of how speaker organized their presentation]
    
    ## Summary/Takeaway Slides
    [If speaker has summary slides, capture them verbatim - these are perfect for social media]
    
    IMPORTANT: Return ONLY the markdown content above. No additional commentary or JSON formatting.
  agent: transcript_analyzer_agent

generate_summaries_task:
  description: >
    Generate executive summaries from the transcript analysis for {speaker} ({affiliation}).
    Create both paragraph and sentence summaries that capture the essence for different audiences.
    
    ANALYSIS INPUT (from analyze_transcript_task):
    {analysis}
    
    Requirements:
    - Paragraph summary: ~100 words, comprehensive yet concise, suitable for busy professionals
    - Sentence summary: ~25 words, ultra-concise essence for executives 
    - Focus on findings, implications, and business relevance
    - Eliminate technical jargon while preserving accuracy
    - Both summaries should complement each other and standalone
    - Use clear, engaging language that makes complex topics accessible
    
  expected_output: >
    ## Paragraph Summary
    [Comprehensive 1-paragraph summary in ~100 words covering core findings and implications]
    
    ## Sentence Summary
    [Ultra-concise 1-sentence summary in ~25 words capturing the essence]
  context: ["analyze_transcript_task"]
  agent: summarizer_agent

create_li_content_task:
  description: >
    Create LinkedIn post for {speaker}'s ({affiliation}) presentation.
    Audience is policymakers and tech professionals, must be accessible to general, non-ML audience.
    Use the transcript analysis and summaries for key details.
    
    <TRANSCRIPT ANALYSIS>
    {analyze_transcript_task}
    </TRANSCRIPT ANALYSIS>
    
    <SUMMARIES>
    {generate_summaries_task}
    </SUMMARIES>
    
    <GENERAL STYLE>
    {style_shared}
    </GENERAL STYLE>
    
    <LINKEDIN STYLE>
    {style_li}
    </LINKEDIN STYLE>

    Requirements:
    - Use transcript analysis "Notable Quotes" and "Social Media Ready Content" for authentic hooks
    - Select strongest hook that grabs attention from policymakers/industry leaders
    - Use paragraph summary from summaries task as foundation for LinkedIn paragraph
    - Incorporate "Core Thesis" and "Key Points" from transcript analysis
    - Ensure hook/paragraph cohesion (no repetitive phrases)
    - Write 2-3 sentence paragraph starting with "@{speaker} ({affiliation}) [verb]" format
    - Create 3-4 bullets ≤8 words each using "Technical Details" from analysis
    - Focus on implications and broader significance for business audience
  expected_output: >
    ## LinkedIn Hook
    [Selected hook that will grab attention from policymakers/industry leaders]
    
    ## LinkedIn Paragraph
    [2-3 sentence summary starting with "@{speaker} ({affiliation}) [verb]" format, explaining technical concepts in plain language]
    
    ## LinkedIn Bullets
    ▸ [≤8 word bullet 1]
    ▸ [≤8 word bullet 2] 
    ▸ [≤8 word bullet 3]
  context: ["analyze_transcript_task", "generate_summaries_task"]
  agent: li_content_writer_agent

create_x_content_task:
  description: >
    Create Twitter/X for {speaker}'s ({speaker_x_handle}) presentation.
    Audience is primarily ML researchers and AI/tech journalists.
    Use the transcript analysis and summaries for key details.
    
    <TRANSCRIPT ANALYSIS>
    {analyze_transcript_task}
    </TRANSCRIPT ANALYSIS>
    
    <SUMMARIES>
    {generate_summaries_task}
    </SUMMARIES>
    
    <GENERAL STYLE>
    {style_shared}
    </GENERAL STYLE>
    
    <TWITTER STYLE>
    {style_x}
    </TWITTER STYLE>

    Requirements:
    - Use "Notable Quotes" and "Social Media Ready Content" from transcript analysis for technical precision
    - Select strongest hook that grabs attention from ML researchers
    - Use "Technical Details" and "Core Thesis" from analysis as content foundation
    - Include specific numbers, methods, results from "Technical Details" section
    - Write ULTRA-DENSE tweet, every character adds value
    - Use abbreviations: w/, &, numbers not words
    - MUST include speaker attribution: use {speaker_x_handle} if contains @ symbol, else speaker name
    - Target ML researchers who appreciate precision and authenticity
  expected_output: >
    ## Twitter/X Content
    [Ultra-dense tweet ≤280 characters with selected hook, technical precision, and speaker attribution]
  context: ["analyze_transcript_task", "generate_summaries_task"]
  agent: x_content_writer_agent

fact_check_content_task:
  description: >
    Verify all content claims against original transcript and provide corrected versions.
    ===
    {speaker} ({affiliation}) transcript from {event_name}: 
    {transcript}
    ===
    PROCESS:
    1. Check every claim against transcript for accuracy
    2. Identify any exaggerations, unsupported claims, or technical errors
    3. If accuracy issues found, rewrite problematic sections using only verified transcript information
    4. Ensure speaker would endorse all final content
    5. Output corrected content versions
    
    ACCURACY SCORING CRITERIA (1-5):
    - 5: Perfect accuracy - all claims directly supported by transcript
    - 4: High accuracy with minor, acceptable simplifications for readability
    - 3: Generally accurate but some claims need verification or correction
    - 2: Multiple accuracy issues requiring significant corrections
    - 1: Major factual errors, misrepresentations, or unsupported claims
  expected_output: >
    ## Accuracy Assessment
    Score: [1-5 scale based on factual correctness]
    Corrections Made: [Description of any corrections applied to fix accuracy issues]
    
    ## Fact-Checked LinkedIn Content
    ### Hook
    [Final accurate LinkedIn hook]
    
    ### Paragraph  
    [Final accurate paragraph summary]
    
    ### Bullets
    ▸ [Accurate bullet 1]
    ▸ [Accurate bullet 2]  
    ▸ [Accurate bullet 3]
    
    ## Fact-Checked Twitter/X Content
    [Final accurate Twitter/X content]
    
    ## Approval Status
    [APPROVED/NEEDS_REVISION - based on accuracy score ≥4/5]
    
    APPROVAL CRITERIA: Only approve (set approved_for_next_step: true) if:
    - Accuracy score is 4/5 or higher (5/5 if perfect, 4/5 with minor simplifications acceptable)
    - No major factual errors or misrepresentations of core findings
    - Content represents speaker's research fairly and accurately
    - Technical details are substantially correct (minor simplifications acceptable for platform constraints)
  context: ["create_li_content_task", "create_x_content_task"]
  agent: fact_checker_agent


voice_authenticity_check_task:
  description: >
    Apply FAR.AI brand voice and maximum conciseness to fact-checked content 
    for social media posts for {speaker} ({affiliation}) talk from {event_name}.
    ===
    PROCESS:
    1. Take the corrected content from fact_check_content_task (accuracy verified)
    2. Apply FAR.AI brand voice: conversational yet authoritative, maximally concise
    3. Cut unnecessary words ruthlessly while preserving accuracy
    4. Ensure professional tone and brand consistency
    5. LinkedIn <150 words, bullets ≤8 words each
    
    SCORING CRITERIA:
    Brand Voice Score (1-5):
    - 5: Natural, engaging, authentic FAR.AI voice - conversational yet intelligent
    - 4: Strong voice with minor improvements needed
    - 3: Acceptable but somewhat generic or formulaic
    - 2: Generic AI-generated tone, lacks personality
    - 1: Robotic, corporate fluff, sounds obviously AI-generated
    
    Conciseness Score (1-5):
    - 5: Every word adds value, maximum information density
    - 4: Highly concise with minimal waste
    - 3: Generally tight with some unnecessary words
    - 2: Moderate wordiness, clear cuts possible
    - 1: Wordy and inefficient, significant trimming needed
  expected_output: >
    ## Voice & Conciseness Assessment
    Brand Voice Score: [1-5 scale based on FAR.AI voice quality]
    Conciseness Score: [1-5 scale based on word efficiency]
    Improvements Made: [Description of brand voice and conciseness improvements applied]
    
    ## Final LinkedIn Content
    ### Hook
    [FAR.AI-voiced LinkedIn hook]
    
    ### Paragraph
    [FAR.AI-voiced paragraph summary]
    
    ### Bullets  
    ▸ [FAR.AI-voiced bullet 1]
    ▸ [FAR.AI-voiced bullet 2]
    ▸ [FAR.AI-voiced bullet 3]
    
    ## Final Twitter/X Content
    [FAR.AI-voiced Twitter/X content]
    
    ## Final Approval Status
    [APPROVED/NEEDS_REVISION - based on voice score ≥4/5 and conciseness score ≥4/5]
    
    APPROVAL CRITERIA: Only approve (set approved_for_next_step: true) if:
    - Brand voice score is 4/5 or higher (natural, engaging FAR.AI voice)
    - Conciseness score is 4/5 or higher (maximum tightness)
    - FAR.AI would confidently publish this content
    - Content sounds like FAR.AI, not speaker mimicry
    - LinkedIn <150 words, bullets ≤8 words each
    - 0 unnecessary words remain
  context: ["create_li_content_task", "create_x_content_task", "fact_check_content_task"]
  agent: voice_checker_agent


qa_orchestration_task:
  description: >
    Orchestrate the complete content generation pipeline by checking Coda data availability and conditionally delegating to agents for preprocessing, content generation, and quality assurance.
    
    AVAILABLE CODA DATA:
    - Resources: {resources_existing}
    - Analysis: {analysis_existing} 
    - Summaries: {summaries_existing}
    - LI content: {li_content_existing}
    - X content: {x_content_existing}
    
    INPUT DATA FOR DELEGATION:
    - Speaker: {speaker} ({affiliation})
    - Talk Title: {talk_title}
    - Event: {event_name}
    - Transcript: {transcript}
    - Slides: {slides_content}
    - YouTube Link: {yt_full_link}
    
    STYLE GUIDES FOR COMPLIANCE:
    {style_shared}
    {style_li}
    {style_x}
    
    ORCHESTRATION WORKFLOW:
    
    1. CONDITIONAL PREPROCESSING (delegate only if data missing):
       - If Resources empty/missing → delegate to resource_researcher_agent
       - If Analysis empty/missing → delegate to transcript_analyzer_agent  
       - If Summaries empty/missing → delegate to summarizer_agent using Analysis
    
    2. CONTENT GENERATION & REFINEMENT:
       - If LI content missing/poor → delegate to li_content_writer_agent
       - If X content missing/poor → delegate to x_content_writer_agent
       - Always delegate to fact_checker_agent for accuracy verification
       - Always delegate to voice_checker_agent for brand voice compliance
    
    3. ITERATIVE QUALITY ASSURANCE:
       - Review all content for accuracy, compliance, and quality
       - Delegate back to specific agents for refinements if needed
       - Continue refinement loops until perfect quality achieved
       - Perform final compliance audit against 14-point rubric
    
    4. FINAL ASSEMBLY & APPROVAL:
       - Assemble complete LinkedIn and Twitter/X posts with templates
       - Replace [video_url] with {yt_full_link}, [resource_url] with resources
       - Perform final accuracy check against transcript
       - Make go/no-go publication decision
    
    DELEGATION AUTHORITY:
    - You can delegate to ANY agent multiple times for iterative improvement
    - Be specific about what needs refinement when delegating
    - Continue until no further improvements possible
    - Only approve when accuracy AND compliance both perfect
    
    CRITICAL PROHIBITIONS:
    - NEVER approve content with hashtags (immediate rejection)
    - NEVER approve content that advocates positions
    - All claims must match original transcript exactly
    
  expected_output: >
    ## Orchestration Summary
    
    ### Preprocessing Status
    - Resources: [Found/Generated/Skipped]
    - Analysis: [Generated/Existing/Skipped]
    - Summaries: [Created/Existing/Skipped]
    
    ### Content Generation Status
    - LinkedIn Content: [Generated and approved]
    - Twitter/X Content: [Generated and approved]
    - Quality Rounds: [Number of refinement iterations performed]
    
    ### Final Outputs for Coda
    
    #### LinkedIn Post
    [Complete assembled LinkedIn post ready for Coda]
    
    #### Twitter/X Post  
    [Complete assembled Twitter/X content ready for Coda]
    
    #### Paragraph Summary
    [Final paragraph summary for Coda]
    
    ### Quality Metrics
    - Accuracy Score: [1-10 based on transcript accuracy]
    - Compliance Score: [X/14 based on style guide compliance]
    
    ### Final Decision
    **Status: [APPROVED/NEEDS_REVISION/REJECTED]**
    
    Issues: [List any blocking issues if not approved]
    Revision Notes: [Specific feedback if revision needed]
  context: ["research_resources_task", "analyze_transcript_task", "generate_summaries_task", "create_li_content_task", "create_x_content_task", "fact_check_content_task", "voice_authenticity_check_task"]
  output_file: "output/{speaker}_qa_orchestration.json"
  agent: qa_orchestrator_agent